---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: default
data:
  DB_HOST: "pgsql-service.default.svc.cluster.local"
  DB_USER: "postgres1"
  DB_NAME: "pgdb"
  DB_PORT: "5432"
  DB_SSLMODE: "disable"
  ALLOWED_ORGINS: "http://127.0.0.1:8080"

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: default
data:
  DB_PASSWORD: "cG9zdGdyZXNAMTIz"

---
apiVersion: v1
kind: PersistentVolume
metadata:
 name: postgresql-pv
 namespace: default
spec:
 persistentVolumeReclaimPolicy: Retain
 accessModes:
   - ReadWriteOnce
 capacity:
   storage: 500Mi
 hostPath:
    path: /var/lib/postgresql/data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: postgresql-pvc
 namespace: default
spec:
 accessModes:
   - ReadWriteOnce
 resources:
    requests:
      storage: 500Mi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgsql
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgsql
  template:
    metadata:
      labels:
        app: pgsql
    spec:
      containers:
        - name: pgsql
          image: vsuraj1127/pgsql:latest
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: db-config
          env:
          - name: DB_PASSWORD
            valueFrom:
               secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
          volumeMounts:
          - mountPath: /var/lib/postgresdata
            name: pg-mount 
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1"
      volumes:
      - name: pg-mount
        persistentVolumeClaim:
           claimName: postgresql-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: pgsql-service
  namespace: default
spec:
  selector:
    app: pgsql
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: vsuraj1127/backend:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: db-config
          env:
          - name: DB_PASSWORD
            valueFrom:
               secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1"
      
---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: default
spec:
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  BACKEND_URL: "http://backend-service:8080/employees"
 

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: vsuraj1127/frontend:latest
          env:
          - name: REACT_APP_SERVER_URL
            valueFrom:
               configMapKeyRef:
                  name: frontend-config
                  key: BACKEND_URL
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1"

---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "30"
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer


