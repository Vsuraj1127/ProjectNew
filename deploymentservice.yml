---

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: default
data:
  DB_HOST: "pgsql-service.default.svc.cluster.local"
  DB_USER: "postgres1"
  DB_NAME: "pgdb"
  DB_PORT: "5432"
  DB_SSLMODE: "disable"
  ALLOWED_ORIGINS: "http://65.2.168.37:30080"

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: default
data:
  DB_PASSWORD: "cG9zdGdyZXNAMTIz"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: default
spec:
  storageClassName: gp2 
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgsql
  namespace: default
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1           
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pgsql
  template:
    metadata:
      labels:
        app: pgsql
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - ip-10-0-1-237.ap-south-1.compute.internal
      containers:
        - name: pgsql
          image: vsuraj1127/pgsql-image:latest
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: db-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
          volumeMounts:
            - mountPath: /var/lib/postgresdata
              name: pg-mount
      volumes:
        - name: pg-mount
          persistentVolumeClaim:
             claimName: postgresql-pvc
      resources:
          limits:
            cpu: "500m"
            memory: 500Mi   


---
apiVersion: v1
kind: Service
metadata:
  name: pgsql-service
  namespace: default
spec:
  selector:
    app: pgsql
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1           
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - ip-10-0-1-251.ap-south-1.compute.internal
      containers:
        - name: backend
          image: vsuraj1127/backend-image:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: db-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
      resources:
        limits:
          cpu: "250m"
          memory: 300Mi   
 

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: default
spec:
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30081
  type: NodePort


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1           
      maxUnavailable: 0
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - ip-10-0-2-83.ap-south-1.compute.internal
      containers:
        - name: frontend
          image: vsuraj1127/frontend-image:latest
          env:
          - name: NODE_OPTIONS
            value: "--max-old-space-size=1024"  # Increase Node.js memory
          - name: REACT_APP_SERVER_URL
            value: "http://65.2.168.37:30081/employees"
          ports:
            - containerPort: 3000
      resources:
        limits:
          cpu: "300m"
          memory: 400Mi        
 

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30080 
  type: NodePort
