---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: default
data:
  DB_HOST: "pgsql-service.default.svc.cluster.local"
  DB_USER: "postgres1"
  DB_NAME: "pgdb"
  DB_PORT: "5432"
  DB_SSLMODE: "disable"
  ALLOWED_ORGINS: "http://127.0.0.1:8080"

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: default
data:
  DB_PASSWORD: "cG9zdGdyZXNAMTIz"

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-pv
  namespace: default
spec:
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 500Mi
  hostPath:
    path: /var/lib/postgresql/data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgsql
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgsql
  template:
    metadata:
      labels:
        app: pgsql
    spec:
      containers:
        - name: pgsql
          image: vsuraj1127/pgsql-image:latest
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: db-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
          volumeMounts:
            - mountPath: /var/lib/postgresdata
              name: pg-mount 
          resources:
            requests:
              memory: "512Mi"  # Increased memory request
              cpu: "500m"
            limits:
              memory: "1Gi"  # Increased memory limit
              cpu: "1"
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
            periodSeconds: 20
      volumes:
        - name: pg-mount
          persistentVolumeClaim:
            claimName: postgresql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: pgsql-service
  namespace: default
spec:
  selector:
    app: pgsql
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: vsuraj1127/backend-image:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: db-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: DB_PASSWORD
            - name: DB_HOST
              value: "pgsql-service.default.svc.cluster.local"
            - name: DB_USER
              value: "postgres1"
            - name: DB_NAME
              value: "pgdb"
            - name: DB_PORT
              value: "5432"
            - name: DB_SSLMODE
              value: "disable"
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: default
spec:
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  BACKEND_URL: "http://backend-service:8080/employees"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: vsuraj1127/frontend-image:latest
          env:
            - name: REACT_APP_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: frontend-config
                  key: BACKEND_URL
            - name: NODE_OPTIONS
              value: "--max-old-space-size=1024"  # Increase Node.js memory
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "512Mi"  # Increased memory request
              cpu: "500m"
            limits:
              memory: "1Gi"  # Increased memory limit
              cpu: "1"
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
  type: NodePort
